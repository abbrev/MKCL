;;;;  -*- Mode: Lisp; Syntax: Common-Lisp; Package: SYSTEM -*-
;;;;
;;;;  Copyright (c) 2010-2012, Jean-Claude Beaudoin.
;;;;  Copyright by a number of previous anonymous authors
;;;;            presumed to be the same as for the rest of MKCL.
;;;;
;;;;  This program is free software; you can redistribute it and/or
;;;;  modify it under the terms of the GNU Lesser General Public
;;;;  License as published by the Free Software Foundation; either
;;;;  version 3 of the License, or (at your option) any later version.
;;;;
;;;;  See file '../../Copyright' for full details.

;;; @configure_input@

#|
(defvar +clos-module-files+
'("src:clos;kernel.lsp"
  "src:clos;macros.lsp"
  "src:clos;method.lsp"
  "src:clos;slot.lsp"
  "src:clos;combin.lsp"
  "src:clos;boot.lsp"
  "src:clos;defclass.lsp"
  "src:clos;standard.lsp"
  "src:clos;builtin.lsp"
  "src:clos;change.lsp"
  "src:clos;stdmethod.lsp"
  "src:clos;generic.lsp"
  "src:clos;fixup.lsp"
  "src:clos;print.lsp"
  "src:clos;streams.lsp"
  "src:lsp;funtype.lsp"   ; Depends on CLOS
  "src:lsp;pprint.lsp"
  "src:clos;conditions.lsp"
  "src:clos;mp-cond.lsp"  ; Depends on conditions.lsp
  "src:clos;uni-cond.lsp" ; Depends on conditions.lsp
  "src:lsp;module.lsp"    ; Depends on conditions.lsp
  "src:lsp;describe.lsp"  ; Depends on conditions.lsp
  "src:clos;inspect.lsp"  ; Depends on describe.lsp
  "src:lsp;top.lsp"       ; Depends on conditions.lsp
))
|#

(defvar +clos-module-files+
'("./clos/kernel.lsp"
  "./clos/macros.lsp"
  "./clos/method.lsp"
  "./clos/slot.lsp"
  "./clos/combin.lsp"
  "./clos/boot.lsp"
  "./clos/defclass.lsp"
  "./clos/standard.lsp"
  "./clos/builtin.lsp"
  "./clos/change.lsp"
  "./clos/stdmethod.lsp"
  "./clos/generic.lsp"
  "./clos/fixup.lsp"
  "./clos/print.lsp"
  "./clos/streams.lsp"
  "./lsp/funtype.lsp"   ; Depends on CLOS
  "./lsp/pprint.lsp"
  "./clos/conditions.lsp"
  "./clos/mp-cond.lsp"  ; Depends on conditions.lsp
  "./clos/uni-cond.lsp" ; Depends on conditions.lsp
  "./lsp/module.lsp"    ; Depends on conditions.lsp
  "./lsp/describe.lsp"  ; Depends on conditions.lsp
  "./clos/inspect.lsp"  ; Depends on describe.lsp
  "./lsp/top.lsp"       ; Depends on conditions.lsp
))


(mapc #'(lambda (x)
         (terpri)
         (princ ";;; Loading ")
         (princ x)
	 (finish-output)
         (load x :verbose nil :external-format '(:ascii :lf)))
 +clos-module-files+)

(setf +clos-module-files+ (remove "./clos/macros.lsp" +clos-module-files+ :test #'equalp))

